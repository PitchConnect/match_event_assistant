{
  "filename": "communication/api_client.py",
  "patch": "@@ -8,8 +8,44 @@ class APIClient:\n     def __init__(self, *args, **kwargs):\n         logger.info(f\"APIClient initialized with args={args}, kwargs={kwargs}\")\n \n+    def get_match(self, match_id, **kwargs):\n+        import os\n+\n+        if os.environ.get(\"FOGIS_API_FORCE_ERROR\") == \"1\":\n+            raise Exception(\"Simulated API error (FOGIS_API_FORCE_ERROR)\")\n+        \"\"\"Fetch match metadata by match_id\"\"\"\n+        endpoint = f\"/matches/{match_id}\"\n+        return self.query(endpoint, **kwargs)\n+\n+    def get_events(self, match_id, **kwargs):\n+        import os\n+\n+        if os.environ.get(\"FOGIS_API_FORCE_ERROR\") == \"1\":\n+            raise Exception(\"Simulated API error (FOGIS_API_FORCE_ERROR)\")\n+        \"\"\"Fetch event timeline for a match\"\"\"\n+        endpoint = f\"/matches/{match_id}/events\"\n+        return self.query(endpoint, **kwargs)\n+\n+    def get_roster(self, match_id, **kwargs):\n+        import os\n+\n+        if os.environ.get(\"FOGIS_API_FORCE_ERROR\") == \"1\":\n+            raise Exception(\"Simulated API error (FOGIS_API_FORCE_ERROR)\")\n+        \"\"\"Fetch team rosters for a match\"\"\"\n+        endpoint = f\"/matches/{match_id}/roster\"\n+        return self.query(endpoint, **kwargs)\n+\n+    def get_officials(self, match_id, **kwargs):\n+        import os\n+\n+        if os.environ.get(\"FOGIS_API_FORCE_ERROR\") == \"1\":\n+            raise Exception(\"Simulated API error (FOGIS_API_FORCE_ERROR)\")\n+        \"\"\"Fetch match officials\"\"\"\n+        endpoint = f\"/matches/{match_id}/officials\"\n+        return self.query(endpoint, **kwargs)\n+\n     def query(self, endpoint, params=None, **kwargs):\n-        logger.info()\n+        logger.info(f\"Querying endpoint: {endpoint}, params: {params}\")\n         return {\n             \"status\": \"success\",\n             \"data\": {\"mock_key\": \"mock_value\"},"
}
{
  "filename": "match_event_assistant/event_logging.py",
  "patch": "@@ -1,40 +1,35 @@\n-\"\"\"\n-Event Logging core module for match_event_assistant.\n-Provides EventLogger class and event data models.\n-\"\"\"\n-\n from dataclasses import dataclass, asdict\n from datetime import datetime\n-from typing import List, Optional\n+from typing import Optional\n import logging\n-\n+from match_event_assistant.event_type_loader import EventTypeLoader\n \n @dataclass\n class MatchEvent:\n-    \"\"\"Data model for a match event.\"\"\"\n-\n     timestamp: datetime\n     event_type: str\n+    event_type_id: int\n     description: Optional[str] = None\n     player_id: Optional[int] = None\n     team_id: Optional[int] = None\n \n+    def validate(self, loader: EventTypeLoader):\n+        loader.validate(self.event_type, self.event_type_id)\n \n class EventLogger:\n-    \"\"\"\n-    Core event logger for match events.\n-    Stores events in memory and provides logging functionality.\n-    \"\"\"\n-\n-    def __init__(self):\n-        self.events: List[MatchEvent] = []\n+    def __init__(self, loader: EventTypeLoader):\n+        self.events = []\n         self.logger = logging.getLogger(\"EventLogger\")\n+        self.loader = loader\n \n     def log_event(self, event: MatchEvent) -> None:\n-        \"\"\"Log a new match event.\"\"\"\n-        self.events.append(event)\n-        self.logger.info(f\"Event logged: {asdict(event)}\")\n-\n-    def get_events(self) -> List[MatchEvent]:\n-        \"\"\"Return all logged events.\"\"\"\n+        try:\n+            event.validate(self.loader)\n+            self.events.append(event)\n+            self.logger.info(f\"Event logged: {asdict(event)}\")\n+        except ValueError as e:\n+            self.logger.error(f\"Event validation failed: {e}\")\n+            raise\n+\n+    def get_events(self):\n         return self.events"
}
