{
  "filename": "cli_test.py",
  "patch": "@@ -0,0 +1,29 @@\n+import cmd\n+\n+\n+class MatchEventAssistantCLI(cmd.Cmd):\n+    intro = \"Welcome to the Match Event Assistant CLI. Type help or ? to list commands.\"\n+    prompt = \"(match-event) \"\n+\n+    def do_simulate_event(self, arg):\n+        \"\"\"Simulate a match event: simulate_event <event_description>\"\"\"\n+        if arg:\n+            print(f\"Simulating event: {arg}\")\n+            # Here, core logic or mock logic would be called\n+            print(f'System response: [Mocked response for \"{arg}\"]')\n+        else:\n+            print(\"Please provide an event description.\")\n+\n+    def do_exit(self, arg):\n+        \"\"\"Exit the CLI.\"\"\"\n+        print(\"Exiting Match Event Assistant CLI.\")\n+        return True\n+\n+    def do_EOF(self, arg):\n+        \"\"\"Exit on Ctrl-D.\"\"\"\n+        print(\"Exiting Match Event Assistant CLI.\")\n+        return True\n+\n+\n+if __name__ == \"__main__\":\n+    MatchEventAssistantCLI().cmdloop()"
}
{
  "filename": "tests/test_cli_integration.py",
  "patch": "@@ -0,0 +1,57 @@\n+import pytest\n+import os\n+import subprocess\n+import sys\n+\n+sys.path.insert(0, \"/a0/dev/match_event_assistant\")\n+\n+\n+def run_cli(args, env=None):\n+    cmd = [sys.executable, \"/a0/dev/match_event_assistant/cli.py\"] + args\n+    result = subprocess.run(cmd, capture_output=True, text=True, env=env)\n+    return result\n+\n+\n+@pytest.mark.parametrize(\n+    \"command,match_id\",\n+    [\n+        (\"get-match\", \"12345\"),\n+        (\"get-events\", \"12345\"),\n+        (\"get-roster\", \"12345\"),\n+        (\"get-officials\", \"12345\"),\n+    ],\n+)\n+def test_cli_success(command, match_id):\n+    result = run_cli([command, match_id, \"--output\", \"json\"])\n+    assert result.returncode == 0\n+    assert \"mock_key\" in result.stdout or \"success\" in result.stdout\n+\n+\n+@pytest.mark.parametrize(\n+    \"command\",\n+    [\n+        \"get-match\",\n+        \"get-events\",\n+        \"get-roster\",\n+        \"get-officials\",\n+    ],\n+)\n+def test_cli_error_missing_id(command):\n+    result = run_cli([command], env=os.environ.copy())\n+    assert result.returncode != 0\n+    assert \"usage:\" in result.stderr or \"error\" in result.stderr or result.stdout\n+\n+\n+def test_cli_invalid_command():\n+    result = run_cli([\"invalid-cmd\"], env=os.environ.copy())\n+    assert result.returncode != 0\n+    assert \"usage:\" in result.stderr or \"error\" in result.stderr or result.stdout\n+\n+\n+# Example of error simulation via env var\n+def test_cli_api_error():\n+    env = os.environ.copy()\n+    env[\"FOGIS_API_FORCE_ERROR\"] = \"1\"\n+    result = run_cli([\"get-match\", \"failid\", \"--output\", \"json\"], env=env)\n+    assert result.returncode == 2\n+    assert \"Simulated API error\" in result.stderr or result.stdout"
}
{
  "filename": "tests/test_event_logging.py",
  "patch": "@@ -1,17 +1,48 @@\n from match_event_assistant.event_logging import EventLogger, MatchEvent\n+from match_event_assistant.event_type_loader import EventTypeLoader\n from datetime import datetime\n+import pytest\n \n+event_type_loader = EventTypeLoader()\n \n-def test_log_and_get_events():\n-    logger = EventLogger()\n+def test_log_valid_event():\n+    logger = EventLogger(event_type_loader)\n     event = MatchEvent(\n         timestamp=datetime.utcnow(),\n-        event_type=\"goal\",\n-        description=\"Test goal\",\n+        event_type=\"regular_goal\",\n+        event_type_id=6,\n+        description=\"Test regular goal\",\n         player_id=10,\n         team_id=1,\n     )\n     logger.log_event(event)\n     events = logger.get_events()\n     assert len(events) == 1\n-    assert events[0].event_type == \"goal\"\n+    assert events[0].event_type == \"regular_goal\"\n+    assert events[0].event_type_id == 6\n+\n+def test_log_event_invalid_type():\n+    logger = EventLogger(event_type_loader)\n+    event = MatchEvent(\n+        timestamp=datetime.utcnow(),\n+        event_type=\"invalid_type\",\n+        event_type_id=999,\n+        description=\"Invalid event type\",\n+        player_id=10,\n+        team_id=1,\n+    )\n+    with pytest.raises(ValueError, match=\"Invalid event_type\"):\n+        logger.log_event(event)\n+\n+def test_log_event_mismatched_id():\n+    logger = EventLogger(event_type_loader)\n+    event = MatchEvent(\n+        timestamp=datetime.utcnow(),\n+        event_type=\"regular_goal\",\n+        event_type_id=999,\n+        description=\"Mismatched event_type_id\",\n+        player_id=10,\n+        team_id=1,\n+    )\n+    with pytest.raises(ValueError, match=\"does not match event_type\"):\n+        logger.log_event(event)"
}
