From 5681229f29deeed7c0a32f4f9f7c14f220219ff8 Mon Sep 17 00:00:00 2001
From: PitchConnect DevAgent <pitchconnect-dev@localhost>
Date: Sun, 27 Jul 2025 19:41:50 +0000
Subject: [PATCH 2/2] QA: Load event_types.yaml at startup, validate
 event_type/event_type_id in CRUD, add error handling and tests

---
 main.py                                    |  3 ++
 match_event_assistant/event_logging.py     | 39 +++++++++-----------
 match_event_assistant/event_type_loader.py | 15 ++++++++
 tests/test_event_logging.py                | 41 +++++++++++++++++++---
 4 files changed, 71 insertions(+), 27 deletions(-)
 create mode 100644 match_event_assistant/event_type_loader.py

diff --git a/main.py b/main.py
index b884b5c..b80cdda 100644
--- a/main.py
+++ b/main.py
@@ -79,3 +79,6 @@ def main():
 
 if __name__ == "__main__":
     main()
+
+from match_event_assistant.event_type_loader import EventTypeLoader
+event_type_loader = EventTypeLoader()
diff --git a/match_event_assistant/event_logging.py b/match_event_assistant/event_logging.py
index 05ffdf3..7d7de43 100644
--- a/match_event_assistant/event_logging.py
+++ b/match_event_assistant/event_logging.py
@@ -1,40 +1,35 @@
-"""
-Event Logging core module for match_event_assistant.
-Provides EventLogger class and event data models.
-"""
-
 from dataclasses import dataclass, asdict
 from datetime import datetime
-from typing import List, Optional
+from typing import Optional
 import logging
-
+from match_event_assistant.event_type_loader import EventTypeLoader
 
 @dataclass
 class MatchEvent:
-    """Data model for a match event."""
-
     timestamp: datetime
     event_type: str
+    event_type_id: int
     description: Optional[str] = None
     player_id: Optional[int] = None
     team_id: Optional[int] = None
 
+    def validate(self, loader: EventTypeLoader):
+        loader.validate(self.event_type, self.event_type_id)
 
 class EventLogger:
-    """
-    Core event logger for match events.
-    Stores events in memory and provides logging functionality.
-    """
-
-    def __init__(self):
-        self.events: List[MatchEvent] = []
+    def __init__(self, loader: EventTypeLoader):
+        self.events = []
         self.logger = logging.getLogger("EventLogger")
+        self.loader = loader
 
     def log_event(self, event: MatchEvent) -> None:
-        """Log a new match event."""
-        self.events.append(event)
-        self.logger.info(f"Event logged: {asdict(event)}")
-
-    def get_events(self) -> List[MatchEvent]:
-        """Return all logged events."""
+        try:
+            event.validate(self.loader)
+            self.events.append(event)
+            self.logger.info(f"Event logged: {asdict(event)}")
+        except ValueError as e:
+            self.logger.error(f"Event validation failed: {e}")
+            raise
+
+    def get_events(self):
         return self.events
diff --git a/match_event_assistant/event_type_loader.py b/match_event_assistant/event_type_loader.py
new file mode 100644
index 0000000..afc721d
--- /dev/null
+++ b/match_event_assistant/event_type_loader.py
@@ -0,0 +1,15 @@
+import yaml
+
+class EventTypeLoader:
+    def __init__(self, yaml_path="event_types.yaml"):
+        with open(yaml_path, "r") as f:
+            data = yaml.safe_load(f)
+        self.name_to_code = {et["name"]: et["code"] for et in data["event_types"]}
+        self.code_to_name = {et["code"]: et["name"] for et in data["event_types"]}
+
+    def validate(self, event_type, event_type_id):
+        if event_type not in self.name_to_code:
+            raise ValueError(f"Invalid event_type: {event_type}")
+        if event_type_id != self.name_to_code[event_type]:
+            raise ValueError(f"event_type_id {event_type_id} does not match event_type {event_type}")
+        return True
diff --git a/tests/test_event_logging.py b/tests/test_event_logging.py
index b31bfba..993fe5e 100644
--- a/tests/test_event_logging.py
+++ b/tests/test_event_logging.py
@@ -1,17 +1,48 @@
 from match_event_assistant.event_logging import EventLogger, MatchEvent
+from match_event_assistant.event_type_loader import EventTypeLoader
 from datetime import datetime
+import pytest
 
+event_type_loader = EventTypeLoader()
 
-def test_log_and_get_events():
-    logger = EventLogger()
+def test_log_valid_event():
+    logger = EventLogger(event_type_loader)
     event = MatchEvent(
         timestamp=datetime.utcnow(),
-        event_type="goal",
-        description="Test goal",
+        event_type="regular_goal",
+        event_type_id=6,
+        description="Test regular goal",
         player_id=10,
         team_id=1,
     )
     logger.log_event(event)
     events = logger.get_events()
     assert len(events) == 1
-    assert events[0].event_type == "goal"
+    assert events[0].event_type == "regular_goal"
+    assert events[0].event_type_id == 6
+
+def test_log_event_invalid_type():
+    logger = EventLogger(event_type_loader)
+    event = MatchEvent(
+        timestamp=datetime.utcnow(),
+        event_type="invalid_type",
+        event_type_id=999,
+        description="Invalid event type",
+        player_id=10,
+        team_id=1,
+    )
+    with pytest.raises(ValueError, match="Invalid event_type"):
+        logger.log_event(event)
+
+def test_log_event_mismatched_id():
+    logger = EventLogger(event_type_loader)
+    event = MatchEvent(
+        timestamp=datetime.utcnow(),
+        event_type="regular_goal",
+        event_type_id=999,
+        description="Mismatched event_type_id",
+        player_id=10,
+        team_id=1,
+    )
+    with pytest.raises(ValueError, match="does not match event_type"):
+        logger.log_event(event)
-- 
2.50.0

